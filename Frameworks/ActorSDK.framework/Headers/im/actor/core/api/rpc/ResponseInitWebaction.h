//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/api/rpc/ResponseInitWebaction.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreApiRpcResponseInitWebaction")
#ifdef RESTRICT_ImActorCoreApiRpcResponseInitWebaction
#define INCLUDE_ALL_ImActorCoreApiRpcResponseInitWebaction 0
#else
#define INCLUDE_ALL_ImActorCoreApiRpcResponseInitWebaction 1
#endif
#undef RESTRICT_ImActorCoreApiRpcResponseInitWebaction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARResponseInitWebaction_) && (INCLUDE_ALL_ImActorCoreApiRpcResponseInitWebaction || defined(INCLUDE_ARResponseInitWebaction))
#define ARResponseInitWebaction_

#define RESTRICT_ImActorCoreNetworkParserResponse 1
#define INCLUDE_ACResponse 1
#include "../../../../../im/actor/core/network/parser/Response.h"

@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

@interface ARResponseInitWebaction : ACResponse

+ (jint)HEADER;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString * __nonnull)uri
                    withNSString:(NSString * __nonnull)regexp
                    withNSString:(NSString * __nonnull)actionHash;

+ (ARResponseInitWebaction *)fromBytesWithByteArray:(IOSByteArray *)data;

- (NSString * __nonnull)getActionHash;

- (jint)getHeaderKey;

- (NSString * __nonnull)getRegexp;

- (NSString * __nonnull)getUri;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ARResponseInitWebaction)

inline jint ARResponseInitWebaction_get_HEADER();
#define ARResponseInitWebaction_HEADER 117
J2OBJC_STATIC_FIELD_CONSTANT(ARResponseInitWebaction, HEADER, jint)

FOUNDATION_EXPORT ARResponseInitWebaction *ARResponseInitWebaction_fromBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void ARResponseInitWebaction_initWithNSString_withNSString_withNSString_(ARResponseInitWebaction *self, NSString *uri, NSString *regexp, NSString *actionHash);

FOUNDATION_EXPORT ARResponseInitWebaction *new_ARResponseInitWebaction_initWithNSString_withNSString_withNSString_(NSString *uri, NSString *regexp, NSString *actionHash) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARResponseInitWebaction *create_ARResponseInitWebaction_initWithNSString_withNSString_withNSString_(NSString *uri, NSString *regexp, NSString *actionHash);

FOUNDATION_EXPORT void ARResponseInitWebaction_init(ARResponseInitWebaction *self);

FOUNDATION_EXPORT ARResponseInitWebaction *new_ARResponseInitWebaction_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARResponseInitWebaction *create_ARResponseInitWebaction_init();

J2OBJC_TYPE_LITERAL_HEADER(ARResponseInitWebaction)

@compatibility_alias ImActorCoreApiRpcResponseInitWebaction ARResponseInitWebaction;

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreApiRpcResponseInitWebaction")
