//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/network/ActorApi.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreNetworkActorApi")
#ifdef RESTRICT_ImActorCoreNetworkActorApi
#define INCLUDE_ALL_ImActorCoreNetworkActorApi 0
#else
#define INCLUDE_ALL_ImActorCoreNetworkActorApi 1
#endif
#undef RESTRICT_ImActorCoreNetworkActorApi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACActorApi_) && (INCLUDE_ALL_ImActorCoreNetworkActorApi || defined(INCLUDE_ACActorApi))
#define ACActorApi_

@class ACApiParserConfig;
@class ACEndpoints;
@class ACNetworkState;
@class ACRequest;
@protocol ACActorApiCallback;
@protocol ACAuthKeyStorage;
@protocol ACRpcCallback;

/*!
 @brief Actor API Object for connecting to Actor's servers
 */
@interface ACActorApi : NSObject

+ (jint)MTPROTO_VERSION;

+ (jint)API_MAJOR_VERSION;

+ (jint)API_MINOR_VERSION;

#pragma mark Public

/*!
 @brief Create API
 @param endpoints  endpoints for server
 @param keyStorage storage for authentication keys
 @param callback   api callback for receiving async events
 */
- (instancetype)initWithACEndpoints:(ACEndpoints *)endpoints
               withACAuthKeyStorage:(id<ACAuthKeyStorage>)keyStorage
             withACActorApiCallback:(id<ACActorApiCallback>)callback
                        withBoolean:(jboolean)isEnableLog
                            withInt:(jint)minDelay
                            withInt:(jint)maxDelay
                            withInt:(jint)maxFailureCount
              withACApiParserConfig:(ACApiParserConfig *)parserConfig;

/*!
 @brief Cancelling API Request
 @param rid request rid
 */
- (void)cancelRequestWithLong:(jlong)rid;

/*!
 @brief Forcing network connection check
 */
- (void)forceNetworkCheck;

- (id<ACAuthKeyStorage>)getKeyStorage;

/*!
 @brief Notification about network state change
 @param state current network state if available
 */
- (void)onNetworkChangedWithACNetworkState:(ACNetworkState *)state;

/*!
 @brief Performing API request
 @param request  request body
 @param callback request callback
 @return rid of request
 */
- (jlong)requestWithACRequest:(ACRequest *)request
            withACRpcCallback:(id<ACRpcCallback>)callback;

/*!
 @brief Performing API request
 @param request  request body
 @param callback request callback
 @param timeout   timeout of rpc
 @return rid of request
 */
- (jlong)requestWithACRequest:(ACRequest *)request
            withACRpcCallback:(id<ACRpcCallback>)callback
                     withLong:(jlong)timeout;

@end

J2OBJC_STATIC_INIT(ACActorApi)

inline jint ACActorApi_get_MTPROTO_VERSION();
#define ACActorApi_MTPROTO_VERSION 3
J2OBJC_STATIC_FIELD_CONSTANT(ACActorApi, MTPROTO_VERSION, jint)

inline jint ACActorApi_get_API_MAJOR_VERSION();
#define ACActorApi_API_MAJOR_VERSION 1
J2OBJC_STATIC_FIELD_CONSTANT(ACActorApi, API_MAJOR_VERSION, jint)

inline jint ACActorApi_get_API_MINOR_VERSION();
#define ACActorApi_API_MINOR_VERSION 6
J2OBJC_STATIC_FIELD_CONSTANT(ACActorApi, API_MINOR_VERSION, jint)

FOUNDATION_EXPORT void ACActorApi_initWithACEndpoints_withACAuthKeyStorage_withACActorApiCallback_withBoolean_withInt_withInt_withInt_withACApiParserConfig_(ACActorApi *self, ACEndpoints *endpoints, id<ACAuthKeyStorage> keyStorage, id<ACActorApiCallback> callback, jboolean isEnableLog, jint minDelay, jint maxDelay, jint maxFailureCount, ACApiParserConfig *parserConfig);

FOUNDATION_EXPORT ACActorApi *new_ACActorApi_initWithACEndpoints_withACAuthKeyStorage_withACActorApiCallback_withBoolean_withInt_withInt_withInt_withACApiParserConfig_(ACEndpoints *endpoints, id<ACAuthKeyStorage> keyStorage, id<ACActorApiCallback> callback, jboolean isEnableLog, jint minDelay, jint maxDelay, jint maxFailureCount, ACApiParserConfig *parserConfig) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACActorApi *create_ACActorApi_initWithACEndpoints_withACAuthKeyStorage_withACActorApiCallback_withBoolean_withInt_withInt_withInt_withACApiParserConfig_(ACEndpoints *endpoints, id<ACAuthKeyStorage> keyStorage, id<ACActorApiCallback> callback, jboolean isEnableLog, jint minDelay, jint maxDelay, jint maxFailureCount, ACApiParserConfig *parserConfig);

J2OBJC_TYPE_LITERAL_HEADER(ACActorApi)

@compatibility_alias ImActorCoreNetworkActorApi ACActorApi;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreNetworkActorApi")
