//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/providers/CallsProvider.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreProvidersCallsProvider")
#ifdef RESTRICT_ImActorCoreProvidersCallsProvider
#define INCLUDE_ALL_ImActorCoreProvidersCallsProvider 0
#else
#define INCLUDE_ALL_ImActorCoreProvidersCallsProvider 1
#endif
#undef RESTRICT_ImActorCoreProvidersCallsProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACCallsProvider_) && (INCLUDE_ALL_ImActorCoreProvidersCallsProvider || defined(INCLUDE_ACCallsProvider))
#define ACCallsProvider_

/*!
 @brief WebRTC provider.
 Used for providing Calls support.
 All methods except init are called in background call management actor.
 IMPORTANT: Right after "onCallEnd" called you need to stop sending any signaling messages.
 Between onIncomingCall/onOutgoingCall and onCallEnd all methods are called with the same call id.
 */
@protocol ACCallsProvider < NSObject, JavaObject >

/*!
 @brief Call event.
 This doesn't mean that call is started.
 @param callId Unique Call Id
 */
- (void)onCallStartWithCallId:(jlong)callId;

/*!
 @brief Call Answered Event
 @param callId Unique Call Id
 */
- (void)onCallAnsweredWithCallId:(jlong)callId;

/*!
 @brief Call End event
 @param callId Unique Call Id
 */
- (void)onCallEndWithCallId:(jlong)callId;

/*!
 @brief Event When outgoing beep need to start
 */
- (void)startOutgoingBeep;

/*!
 @brief Event when outgoing beep need to stop
 */
- (void)stopOutgoingBeep;

@end

J2OBJC_EMPTY_STATIC_INIT(ACCallsProvider)

J2OBJC_TYPE_LITERAL_HEADER(ACCallsProvider)

#define ImActorCoreProvidersCallsProvider ACCallsProvider

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreProvidersCallsProvider")
