//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/modules/file/DownloadManager.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreModulesFileDownloadManager")
#ifdef RESTRICT_ImActorCoreModulesFileDownloadManager
#define INCLUDE_ALL_ImActorCoreModulesFileDownloadManager 0
#else
#define INCLUDE_ALL_ImActorCoreModulesFileDownloadManager 1
#endif
#undef RESTRICT_ImActorCoreModulesFileDownloadManager

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ImActorCoreModulesFileDownloadManager_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager))
#define ImActorCoreModulesFileDownloadManager_

#define RESTRICT_ImActorCoreModulesModuleActor 1
#define INCLUDE_ACModuleActor 1
#include "../../../../../im/actor/core/modules/ModuleActor.h"

@class ACFileReference;
@protocol ACFileCallback;
@protocol ACModuleContext;
@protocol ARFileSystemReference;

@interface ImActorCoreModulesFileDownloadManager : ACModuleActor

#pragma mark Public

- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context;

- (void)bindDownloadWithACFileReference:(ACFileReference *)fileReference
                            withBoolean:(jboolean)autoStart
                     withACFileCallback:(id<ACFileCallback>)callback;

- (void)cancelDownloadWithLong:(jlong)fileId;

- (void)onDownloadedWithLong:(jlong)fileId
   withARFileSystemReference:(id<ARFileSystemReference>)reference;

- (void)onDownloadErrorWithLong:(jlong)fileId;

- (void)onDownloadProgressWithLong:(jlong)fileId
                         withFloat:(jfloat)progress;

- (void)onReceiveWithId:(id)message;

- (void)preStart;

- (void)requestStateWithLong:(jlong)fileId
          withACFileCallback:(id<ACFileCallback>)callback;

- (void)startDownloadWithACFileReference:(ACFileReference *)fileReference;

- (void)unbindDownloadWithLong:(jlong)fileId
                   withBoolean:(jboolean)autoCancel
            withACFileCallback:(id<ACFileCallback>)callback;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_initWithACModuleContext_(ImActorCoreModulesFileDownloadManager *self, id<ACModuleContext> context);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager *new_ImActorCoreModulesFileDownloadManager_initWithACModuleContext_(id<ACModuleContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager *create_ImActorCoreModulesFileDownloadManager_initWithACModuleContext_(id<ACModuleContext> context);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_RequestState_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_RequestState))
#define ImActorCoreModulesFileDownloadManager_RequestState_

@protocol ACFileCallback;

@interface ImActorCoreModulesFileDownloadManager_RequestState : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId
          withACFileCallback:(id<ACFileCallback>)callback;

- (id<ACFileCallback>)getCallback;

- (jlong)getFileId;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_RequestState)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_RequestState_initWithLong_withACFileCallback_(ImActorCoreModulesFileDownloadManager_RequestState *self, jlong fileId, id<ACFileCallback> callback);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_RequestState *new_ImActorCoreModulesFileDownloadManager_RequestState_initWithLong_withACFileCallback_(jlong fileId, id<ACFileCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_RequestState *create_ImActorCoreModulesFileDownloadManager_RequestState_initWithLong_withACFileCallback_(jlong fileId, id<ACFileCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_RequestState)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_BindDownload_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_BindDownload))
#define ImActorCoreModulesFileDownloadManager_BindDownload_

@class ACFileReference;
@protocol ACFileCallback;

@interface ImActorCoreModulesFileDownloadManager_BindDownload : NSObject

#pragma mark Public

- (instancetype)initWithACFileReference:(ACFileReference *)fileReference
                            withBoolean:(jboolean)isAutostart
                     withACFileCallback:(id<ACFileCallback>)callback;

- (id<ACFileCallback>)getCallback;

- (ACFileReference *)getFileReference;

- (jboolean)isAutostart;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_BindDownload)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(ImActorCoreModulesFileDownloadManager_BindDownload *self, ACFileReference *fileReference, jboolean isAutostart, id<ACFileCallback> callback);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_BindDownload *new_ImActorCoreModulesFileDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(ACFileReference *fileReference, jboolean isAutostart, id<ACFileCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_BindDownload *create_ImActorCoreModulesFileDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(ACFileReference *fileReference, jboolean isAutostart, id<ACFileCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_BindDownload)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_StartDownload_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_StartDownload))
#define ImActorCoreModulesFileDownloadManager_StartDownload_

@class ACFileReference;

@interface ImActorCoreModulesFileDownloadManager_StartDownload : NSObject

#pragma mark Public

- (instancetype)initWithACFileReference:(ACFileReference *)fileReference;

- (ACFileReference *)getFileReference;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_StartDownload)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_StartDownload_initWithACFileReference_(ImActorCoreModulesFileDownloadManager_StartDownload *self, ACFileReference *fileReference);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_StartDownload *new_ImActorCoreModulesFileDownloadManager_StartDownload_initWithACFileReference_(ACFileReference *fileReference) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_StartDownload *create_ImActorCoreModulesFileDownloadManager_StartDownload_initWithACFileReference_(ACFileReference *fileReference);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_StartDownload)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_CancelDownload_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_CancelDownload))
#define ImActorCoreModulesFileDownloadManager_CancelDownload_

@interface ImActorCoreModulesFileDownloadManager_CancelDownload : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId;

- (jlong)getFileId;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_CancelDownload)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_CancelDownload_initWithLong_(ImActorCoreModulesFileDownloadManager_CancelDownload *self, jlong fileId);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_CancelDownload *new_ImActorCoreModulesFileDownloadManager_CancelDownload_initWithLong_(jlong fileId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_CancelDownload *create_ImActorCoreModulesFileDownloadManager_CancelDownload_initWithLong_(jlong fileId);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_CancelDownload)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_UnbindDownload_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_UnbindDownload))
#define ImActorCoreModulesFileDownloadManager_UnbindDownload_

@protocol ACFileCallback;

@interface ImActorCoreModulesFileDownloadManager_UnbindDownload : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId
                 withBoolean:(jboolean)isAutocancel
          withACFileCallback:(id<ACFileCallback>)callback;

- (id<ACFileCallback>)getCallback;

- (jlong)getFileId;

- (jboolean)isAutocancel;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_UnbindDownload)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(ImActorCoreModulesFileDownloadManager_UnbindDownload *self, jlong fileId, jboolean isAutocancel, id<ACFileCallback> callback);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_UnbindDownload *new_ImActorCoreModulesFileDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(jlong fileId, jboolean isAutocancel, id<ACFileCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_UnbindDownload *create_ImActorCoreModulesFileDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(jlong fileId, jboolean isAutocancel, id<ACFileCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_UnbindDownload)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_OnDownloadProgress_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_OnDownloadProgress))
#define ImActorCoreModulesFileDownloadManager_OnDownloadProgress_

@interface ImActorCoreModulesFileDownloadManager_OnDownloadProgress : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId
                   withFloat:(jfloat)progress;

- (jlong)getFileId;

- (jfloat)getProgress;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_OnDownloadProgress)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_OnDownloadProgress_initWithLong_withFloat_(ImActorCoreModulesFileDownloadManager_OnDownloadProgress *self, jlong fileId, jfloat progress);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloadProgress *new_ImActorCoreModulesFileDownloadManager_OnDownloadProgress_initWithLong_withFloat_(jlong fileId, jfloat progress) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloadProgress *create_ImActorCoreModulesFileDownloadManager_OnDownloadProgress_initWithLong_withFloat_(jlong fileId, jfloat progress);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_OnDownloadProgress)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_OnDownloaded_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_OnDownloaded))
#define ImActorCoreModulesFileDownloadManager_OnDownloaded_

@protocol ARFileSystemReference;

@interface ImActorCoreModulesFileDownloadManager_OnDownloaded : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId
   withARFileSystemReference:(id<ARFileSystemReference>)reference;

- (jlong)getFileId;

- (id<ARFileSystemReference>)getReference;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_OnDownloaded)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(ImActorCoreModulesFileDownloadManager_OnDownloaded *self, jlong fileId, id<ARFileSystemReference> reference);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloaded *new_ImActorCoreModulesFileDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(jlong fileId, id<ARFileSystemReference> reference) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloaded *create_ImActorCoreModulesFileDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(jlong fileId, id<ARFileSystemReference> reference);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_OnDownloaded)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_OnDownloadedError_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_OnDownloadedError))
#define ImActorCoreModulesFileDownloadManager_OnDownloadedError_

@interface ImActorCoreModulesFileDownloadManager_OnDownloadedError : NSObject

#pragma mark Public

- (instancetype)initWithLong:(jlong)fileId;

- (jlong)getFileId;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_OnDownloadedError)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_OnDownloadedError_initWithLong_(ImActorCoreModulesFileDownloadManager_OnDownloadedError *self, jlong fileId);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloadedError *new_ImActorCoreModulesFileDownloadManager_OnDownloadedError_initWithLong_(jlong fileId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_OnDownloadedError *create_ImActorCoreModulesFileDownloadManager_OnDownloadedError_initWithLong_(jlong fileId);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_OnDownloadedError)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_SubscribeToDownloads_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_SubscribeToDownloads))
#define ImActorCoreModulesFileDownloadManager_SubscribeToDownloads_

@protocol ACFileEventCallback;

@interface ImActorCoreModulesFileDownloadManager_SubscribeToDownloads : NSObject

#pragma mark Public

- (instancetype)initWithACFileEventCallback:(id<ACFileEventCallback>)callback;

- (id<ACFileEventCallback>)getCallback;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_SubscribeToDownloads)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_SubscribeToDownloads_initWithACFileEventCallback_(ImActorCoreModulesFileDownloadManager_SubscribeToDownloads *self, id<ACFileEventCallback> callback);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_SubscribeToDownloads *new_ImActorCoreModulesFileDownloadManager_SubscribeToDownloads_initWithACFileEventCallback_(id<ACFileEventCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_SubscribeToDownloads *create_ImActorCoreModulesFileDownloadManager_SubscribeToDownloads_initWithACFileEventCallback_(id<ACFileEventCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_SubscribeToDownloads)

#endif

#if !defined (ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads_) && (INCLUDE_ALL_ImActorCoreModulesFileDownloadManager || defined(INCLUDE_ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads))
#define ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads_

@protocol ACFileEventCallback;

@interface ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads : NSObject

#pragma mark Public

- (instancetype)initWithACFileEventCallback:(id<ACFileEventCallback>)callback;

- (id<ACFileEventCallback>)getCallback;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads)

FOUNDATION_EXPORT void ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads_initWithACFileEventCallback_(ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads *self, id<ACFileEventCallback> callback);

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads *new_ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads_initWithACFileEventCallback_(id<ACFileEventCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads *create_ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads_initWithACFileEventCallback_(id<ACFileEventCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesFileDownloadManager_UnsubscribeToDownloads)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreModulesFileDownloadManager")
