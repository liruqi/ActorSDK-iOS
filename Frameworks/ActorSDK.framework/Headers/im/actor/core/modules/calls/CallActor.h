//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/modules/calls/CallActor.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreModulesCallsCallActor")
#ifdef RESTRICT_ImActorCoreModulesCallsCallActor
#define INCLUDE_ALL_ImActorCoreModulesCallsCallActor 0
#else
#define INCLUDE_ALL_ImActorCoreModulesCallsCallActor 1
#endif
#undef RESTRICT_ImActorCoreModulesCallsCallActor

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ImActorCoreModulesCallsCallActor_) && (INCLUDE_ALL_ImActorCoreModulesCallsCallActor || defined(INCLUDE_ImActorCoreModulesCallsCallActor))
#define ImActorCoreModulesCallsCallActor_

#define RESTRICT_ImActorCoreModulesCallsPeersAbsCallActor 1
#define INCLUDE_ImActorCoreModulesCallsPeersAbsCallActor 1
#include "../../../../../im/actor/core/modules/calls/peers/AbsCallActor.h"

@class ACPeer;
@protocol ACCommandCallback;
@protocol ACModuleContext;
@protocol ARWakeLock;

@interface ImActorCoreModulesCallsCallActor : ImActorCoreModulesCallsPeersAbsCallActor

#pragma mark Public

- (instancetype)initWithLong:(jlong)callId
              withARWakeLock:(id<ARWakeLock>)wakeLock
         withACModuleContext:(id<ACModuleContext>)context;

- (instancetype)initWithACPeer:(ACPeer *)peer
         withACCommandCallback:(id<ACCommandCallback>)callback
                withARWakeLock:(id<ARWakeLock>)wakeLock
           withACModuleContext:(id<ACModuleContext>)context;

- (void)onAnswerCall;

- (void)onBusStartedWithNSString:(NSString *)busId;

- (void)onBusStopped;

- (void)onCallConnected;

- (void)onCallEnabled;

- (void)onMuteChangedWithBoolean:(jboolean)isMuted;

- (void)onReceiveWithId:(id)message;

- (void)onRejectCall;

- (void)postStop;

- (void)preStart;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesCallsCallActor)

FOUNDATION_EXPORT void ImActorCoreModulesCallsCallActor_initWithLong_withARWakeLock_withACModuleContext_(ImActorCoreModulesCallsCallActor *self, jlong callId, id<ARWakeLock> wakeLock, id<ACModuleContext> context);

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor *new_ImActorCoreModulesCallsCallActor_initWithLong_withARWakeLock_withACModuleContext_(jlong callId, id<ARWakeLock> wakeLock, id<ACModuleContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor *create_ImActorCoreModulesCallsCallActor_initWithLong_withARWakeLock_withACModuleContext_(jlong callId, id<ARWakeLock> wakeLock, id<ACModuleContext> context);

FOUNDATION_EXPORT void ImActorCoreModulesCallsCallActor_initWithACPeer_withACCommandCallback_withARWakeLock_withACModuleContext_(ImActorCoreModulesCallsCallActor *self, ACPeer *peer, id<ACCommandCallback> callback, id<ARWakeLock> wakeLock, id<ACModuleContext> context);

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor *new_ImActorCoreModulesCallsCallActor_initWithACPeer_withACCommandCallback_withARWakeLock_withACModuleContext_(ACPeer *peer, id<ACCommandCallback> callback, id<ARWakeLock> wakeLock, id<ACModuleContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor *create_ImActorCoreModulesCallsCallActor_initWithACPeer_withACCommandCallback_withARWakeLock_withACModuleContext_(ACPeer *peer, id<ACCommandCallback> callback, id<ARWakeLock> wakeLock, id<ACModuleContext> context);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesCallsCallActor)

#endif

#if !defined (ImActorCoreModulesCallsCallActor_AnswerCall_) && (INCLUDE_ALL_ImActorCoreModulesCallsCallActor || defined(INCLUDE_ImActorCoreModulesCallsCallActor_AnswerCall))
#define ImActorCoreModulesCallsCallActor_AnswerCall_

@interface ImActorCoreModulesCallsCallActor_AnswerCall : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesCallsCallActor_AnswerCall)

FOUNDATION_EXPORT void ImActorCoreModulesCallsCallActor_AnswerCall_init(ImActorCoreModulesCallsCallActor_AnswerCall *self);

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor_AnswerCall *new_ImActorCoreModulesCallsCallActor_AnswerCall_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor_AnswerCall *create_ImActorCoreModulesCallsCallActor_AnswerCall_init();

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesCallsCallActor_AnswerCall)

#endif

#if !defined (ImActorCoreModulesCallsCallActor_RejectCall_) && (INCLUDE_ALL_ImActorCoreModulesCallsCallActor || defined(INCLUDE_ImActorCoreModulesCallsCallActor_RejectCall))
#define ImActorCoreModulesCallsCallActor_RejectCall_

@interface ImActorCoreModulesCallsCallActor_RejectCall : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesCallsCallActor_RejectCall)

FOUNDATION_EXPORT void ImActorCoreModulesCallsCallActor_RejectCall_init(ImActorCoreModulesCallsCallActor_RejectCall *self);

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor_RejectCall *new_ImActorCoreModulesCallsCallActor_RejectCall_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesCallsCallActor_RejectCall *create_ImActorCoreModulesCallsCallActor_RejectCall_init();

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesCallsCallActor_RejectCall)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreModulesCallsCallActor")
