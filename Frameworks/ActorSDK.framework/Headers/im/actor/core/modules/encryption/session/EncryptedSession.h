//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/modules/encryption/session/EncryptedSession.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreModulesEncryptionSessionEncryptedSession")
#ifdef RESTRICT_ImActorCoreModulesEncryptionSessionEncryptedSession
#define INCLUDE_ALL_ImActorCoreModulesEncryptionSessionEncryptedSession 0
#else
#define INCLUDE_ALL_ImActorCoreModulesEncryptionSessionEncryptedSession 1
#endif
#undef RESTRICT_ImActorCoreModulesEncryptionSessionEncryptedSession

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ImActorCoreModulesEncryptionSessionEncryptedSession_) && (INCLUDE_ALL_ImActorCoreModulesEncryptionSessionEncryptedSession || defined(INCLUDE_ImActorCoreModulesEncryptionSessionEncryptedSession))
#define ImActorCoreModulesEncryptionSessionEncryptedSession_

@class IOSByteArray;
@class ImActorCoreModulesEncryptionEntityPrivateKey;
@class ImActorCoreModulesEncryptionEntityPublicKey;

@interface ImActorCoreModulesEncryptionSessionEncryptedSession : NSObject

#pragma mark Public

- (instancetype)initWithImActorCoreModulesEncryptionEntityPrivateKey:(ImActorCoreModulesEncryptionEntityPrivateKey *)ownIdentityKey
                    withImActorCoreModulesEncryptionEntityPrivateKey:(ImActorCoreModulesEncryptionEntityPrivateKey *)ownPreKey
                     withImActorCoreModulesEncryptionEntityPublicKey:(ImActorCoreModulesEncryptionEntityPublicKey *)theirIdentityKey
                     withImActorCoreModulesEncryptionEntityPublicKey:(ImActorCoreModulesEncryptionEntityPublicKey *)theirPreKey
                                                             withInt:(jint)peerKeyGroupId;

- (IOSByteArray *)getMasterKey;

- (ImActorCoreModulesEncryptionEntityPrivateKey *)getOwnIdentityKey;

- (ImActorCoreModulesEncryptionEntityPrivateKey *)getOwnPreKey;

- (jint)getPeerKeyGroupId;

- (ImActorCoreModulesEncryptionEntityPublicKey *)getTheirIdentityKey;

- (ImActorCoreModulesEncryptionEntityPublicKey *)getTheirPreKey;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorCoreModulesEncryptionSessionEncryptedSession)

FOUNDATION_EXPORT void ImActorCoreModulesEncryptionSessionEncryptedSession_initWithImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPublicKey_withImActorCoreModulesEncryptionEntityPublicKey_withInt_(ImActorCoreModulesEncryptionSessionEncryptedSession *self, ImActorCoreModulesEncryptionEntityPrivateKey *ownIdentityKey, ImActorCoreModulesEncryptionEntityPrivateKey *ownPreKey, ImActorCoreModulesEncryptionEntityPublicKey *theirIdentityKey, ImActorCoreModulesEncryptionEntityPublicKey *theirPreKey, jint peerKeyGroupId);

FOUNDATION_EXPORT ImActorCoreModulesEncryptionSessionEncryptedSession *new_ImActorCoreModulesEncryptionSessionEncryptedSession_initWithImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPublicKey_withImActorCoreModulesEncryptionEntityPublicKey_withInt_(ImActorCoreModulesEncryptionEntityPrivateKey *ownIdentityKey, ImActorCoreModulesEncryptionEntityPrivateKey *ownPreKey, ImActorCoreModulesEncryptionEntityPublicKey *theirIdentityKey, ImActorCoreModulesEncryptionEntityPublicKey *theirPreKey, jint peerKeyGroupId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorCoreModulesEncryptionSessionEncryptedSession *create_ImActorCoreModulesEncryptionSessionEncryptedSession_initWithImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPrivateKey_withImActorCoreModulesEncryptionEntityPublicKey_withImActorCoreModulesEncryptionEntityPublicKey_withInt_(ImActorCoreModulesEncryptionEntityPrivateKey *ownIdentityKey, ImActorCoreModulesEncryptionEntityPrivateKey *ownPreKey, ImActorCoreModulesEncryptionEntityPublicKey *theirIdentityKey, ImActorCoreModulesEncryptionEntityPublicKey *theirPreKey, jint peerKeyGroupId);

J2OBJC_TYPE_LITERAL_HEADER(ImActorCoreModulesEncryptionSessionEncryptedSession)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreModulesEncryptionSessionEncryptedSession")
