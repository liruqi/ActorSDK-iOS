//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/entity/Peer.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreEntityPeer")
#ifdef RESTRICT_ImActorCoreEntityPeer
#define INCLUDE_ALL_ImActorCoreEntityPeer 0
#else
#define INCLUDE_ALL_ImActorCoreEntityPeer 1
#endif
#undef RESTRICT_ImActorCoreEntityPeer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACPeer_) && (INCLUDE_ALL_ImActorCoreEntityPeer || defined(INCLUDE_ACPeer))
#define ACPeer_

#define RESTRICT_ImActorRuntimeBserBserObject 1
#define INCLUDE_ARBserObject 1
#include "../../../../im/actor/runtime/bser/BserObject.h"

@class ACPeerType;
@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;
@protocol ARBserCreator;

@interface ACPeer : ARBserObject
@property (readonly, nonatomic, getter=getPeerType) ACPeerType *peerType;
@property (readonly, nonatomic, getter=getPeerId) jint peerId;

+ (id<ARBserCreator>)CREATOR;

#pragma mark Public

- (instancetype)initWithACPeerType:(ACPeerType *)peerType
                           withInt:(jint)peerId;

- (jboolean)isEqual:(id)o;

+ (ACPeer *)fromBytesWithByteArray:(IOSByteArray *)data;

+ (ACPeer *)fromUniqueIdWithLong:(jlong)uid;

- (jint)getPeerId;

- (ACPeerType *)getPeerType;

- (jlong)getUnuqueId;

+ (ACPeer *)groupWithInt:(jint)gid;

- (NSUInteger)hash;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

- (NSString *)toIdString;

- (NSString *)description;

+ (ACPeer *)userWithInt:(jint)uid;

@end

J2OBJC_STATIC_INIT(ACPeer)

inline id<ARBserCreator> ACPeer_get_CREATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ARBserCreator> ACPeer_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ACPeer, CREATOR, id<ARBserCreator>)

FOUNDATION_EXPORT ACPeer *ACPeer_fromBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT ACPeer *ACPeer_fromUniqueIdWithLong_(jlong uid);

FOUNDATION_EXPORT ACPeer *ACPeer_userWithInt_(jint uid);

FOUNDATION_EXPORT ACPeer *ACPeer_groupWithInt_(jint gid);

FOUNDATION_EXPORT void ACPeer_initWithACPeerType_withInt_(ACPeer *self, ACPeerType *peerType, jint peerId);

FOUNDATION_EXPORT ACPeer *new_ACPeer_initWithACPeerType_withInt_(ACPeerType *peerType, jint peerId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACPeer *create_ACPeer_initWithACPeerType_withInt_(ACPeerType *peerType, jint peerId);

J2OBJC_TYPE_LITERAL_HEADER(ACPeer)

@compatibility_alias ImActorCoreEntityPeer ACPeer;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreEntityPeer")
