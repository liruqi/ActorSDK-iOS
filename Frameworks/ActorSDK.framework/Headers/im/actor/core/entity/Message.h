//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/core/core-shared/src/main/java/im/actor/core/entity/Message.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorCoreEntityMessage")
#ifdef RESTRICT_ImActorCoreEntityMessage
#define INCLUDE_ALL_ImActorCoreEntityMessage 0
#else
#define INCLUDE_ALL_ImActorCoreEntityMessage 1
#endif
#undef RESTRICT_ImActorCoreEntityMessage

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ACMessage_) && (INCLUDE_ALL_ImActorCoreEntityMessage || defined(INCLUDE_ACMessage))
#define ACMessage_

#define RESTRICT_ImActorRuntimeBserBserObject 1
#define INCLUDE_ARBserObject 1
#include "../../../../im/actor/runtime/bser/BserObject.h"

#define RESTRICT_ImActorRuntimeStorageListEngineItem 1
#define INCLUDE_ARListEngineItem 1
#include "../../../../im/actor/runtime/storage/ListEngineItem.h"

@class ACAbsContent;
@class ACMessageState;
@class ARBserValues;
@class ARBserWriter;
@class IOSByteArray;
@protocol ARBserCreator;
@protocol JavaUtilList;

@interface ACMessage : ARBserObject < ARListEngineItem >
@property (readonly, nonatomic, getter=getRid) jlong rid;
@property (readonly, nonatomic, getter=getSortDate) jlong sortDate;
@property (readonly, nonatomic, getter=getDate) jlong date;
@property (readonly, nonatomic, getter=getSenderId) jint senderId;
@property (readonly, nonatomic, getter=getMessageState) ACMessageState *messageState;
@property (readonly, nonatomic, getter=getContent) ACAbsContent *content;
@property (readonly, nonatomic, getter=getReactions) id<JavaUtilList> reactions;
@property (readonly, nonatomic, getter=getContentIndex) jint contentIndex;

+ (id<ARBserCreator>)CREATOR;

+ (NSString *)ENTITY_NAME;

#pragma mark Public

- (instancetype)initWithLong:(jlong)rid
                    withLong:(jlong)sortDate
                    withLong:(jlong)date
                     withInt:(jint)senderId
          withACMessageState:(ACMessageState *)messageState
            withACAbsContent:(ACAbsContent *)content;

- (instancetype)initWithLong:(jlong)rid
                    withLong:(jlong)sortDate
                    withLong:(jlong)date
                     withInt:(jint)senderId
          withACMessageState:(ACMessageState *)messageState
            withACAbsContent:(ACAbsContent *)content
            withJavaUtilList:(id<JavaUtilList>)reactions
                     withInt:(jint)contentIndex;

- (ACMessage *)changeAllDateWithLong:(jlong)date;

- (ACMessage *)changeContentWithACAbsContent:(ACAbsContent *)content;

- (ACMessage *)changeDateWithLong:(jlong)date;

- (ACMessage *)changeReactionsWithJavaUtilList:(id<JavaUtilList>)reactions;

- (ACMessage *)changeStateWithACMessageState:(ACMessageState *)messageState;

+ (ACMessage *)fromBytesWithByteArray:(IOSByteArray *)data;

- (ACAbsContent *)getContent;

- (jint)getContentIndex;

- (jlong)getDate;

- (jlong)getEngineId;

- (NSString *)getEngineSearch;

- (jlong)getEngineSort;

- (ACMessageState *)getMessageState;

- (id<JavaUtilList>)getReactions;

- (jlong)getRid;

- (jint)getSenderId;

- (jlong)getSortDate;

- (jboolean)isOnServer;

- (jboolean)isPendingOrSent;

- (jboolean)isSent;

- (void)parseWithARBserValues:(ARBserValues *)values;

- (void)serializeWithARBserWriter:(ARBserWriter *)writer;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ACMessage)

inline id<ARBserCreator> ACMessage_get_CREATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ARBserCreator> ACMessage_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ACMessage, CREATOR, id<ARBserCreator>)

inline NSString *ACMessage_get_ENTITY_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ACMessage_ENTITY_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ACMessage, ENTITY_NAME, NSString *)

FOUNDATION_EXPORT ACMessage *ACMessage_fromBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_(ACMessage *self, jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content);

FOUNDATION_EXPORT ACMessage *new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_(jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACMessage *create_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_(jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content);

FOUNDATION_EXPORT void ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_withJavaUtilList_withInt_(ACMessage *self, jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content, id<JavaUtilList> reactions, jint contentIndex);

FOUNDATION_EXPORT ACMessage *new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_withJavaUtilList_withInt_(jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content, id<JavaUtilList> reactions, jint contentIndex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACMessage *create_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageState_withACAbsContent_withJavaUtilList_withInt_(jlong rid, jlong sortDate, jlong date, jint senderId, ACMessageState *messageState, ACAbsContent *content, id<JavaUtilList> reactions, jint contentIndex);

FOUNDATION_EXPORT void ACMessage_init(ACMessage *self);

FOUNDATION_EXPORT ACMessage *new_ACMessage_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ACMessage *create_ACMessage_init();

J2OBJC_TYPE_LITERAL_HEADER(ACMessage)

@compatibility_alias ImActorCoreEntityMessage ACMessage;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorCoreEntityMessage")
