//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java/im/actor/runtime/actors/dispatch/queue/QueueDispatcher.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorRuntimeActorsDispatchQueueQueueDispatcher")
#ifdef RESTRICT_ImActorRuntimeActorsDispatchQueueQueueDispatcher
#define INCLUDE_ALL_ImActorRuntimeActorsDispatchQueueQueueDispatcher 0
#else
#define INCLUDE_ALL_ImActorRuntimeActorsDispatchQueueQueueDispatcher 1
#endif
#undef RESTRICT_ImActorRuntimeActorsDispatchQueueQueueDispatcher

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ImActorRuntimeActorsDispatchQueueQueueDispatcher_) && (INCLUDE_ALL_ImActorRuntimeActorsDispatchQueueQueueDispatcher || defined(INCLUDE_ImActorRuntimeActorsDispatchQueueQueueDispatcher))
#define ImActorRuntimeActorsDispatchQueueQueueDispatcher_

#define RESTRICT_ImActorRuntimeActorsDispatchQueueQueueCollectionListener 1
#define INCLUDE_ImActorRuntimeActorsDispatchQueueQueueCollectionListener 1
#include "../../../../../../im/actor/runtime/actors/dispatch/queue/QueueCollectionListener.h"

@class ARThreadPriority;
@class ImActorRuntimeActorsDispatchQueueQueueCollection;
@protocol ARConsumer;

@interface ImActorRuntimeActorsDispatchQueueQueueDispatcher : NSObject < ImActorRuntimeActorsDispatchQueueQueueCollectionListener >

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name
            withARThreadPriority:(ARThreadPriority *)priority
withImActorRuntimeActorsDispatchQueueQueueCollection:(ImActorRuntimeActorsDispatchQueueQueueCollection *)collection
                  withARConsumer:(id<ARConsumer>)handler;

- (void)onChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorRuntimeActorsDispatchQueueQueueDispatcher)

FOUNDATION_EXPORT void ImActorRuntimeActorsDispatchQueueQueueDispatcher_initWithNSString_withARThreadPriority_withImActorRuntimeActorsDispatchQueueQueueCollection_withARConsumer_(ImActorRuntimeActorsDispatchQueueQueueDispatcher *self, NSString *name, ARThreadPriority *priority, ImActorRuntimeActorsDispatchQueueQueueCollection *collection, id<ARConsumer> handler);

FOUNDATION_EXPORT ImActorRuntimeActorsDispatchQueueQueueDispatcher *new_ImActorRuntimeActorsDispatchQueueQueueDispatcher_initWithNSString_withARThreadPriority_withImActorRuntimeActorsDispatchQueueQueueCollection_withARConsumer_(NSString *name, ARThreadPriority *priority, ImActorRuntimeActorsDispatchQueueQueueCollection *collection, id<ARConsumer> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ImActorRuntimeActorsDispatchQueueQueueDispatcher *create_ImActorRuntimeActorsDispatchQueueQueueDispatcher_initWithNSString_withARThreadPriority_withImActorRuntimeActorsDispatchQueueQueueCollection_withARConsumer_(NSString *name, ARThreadPriority *priority, ImActorRuntimeActorsDispatchQueueQueueCollection *collection, id<ARConsumer> handler);

J2OBJC_TYPE_LITERAL_HEADER(ImActorRuntimeActorsDispatchQueueQueueDispatcher)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorRuntimeActorsDispatchQueueQueueDispatcher")
