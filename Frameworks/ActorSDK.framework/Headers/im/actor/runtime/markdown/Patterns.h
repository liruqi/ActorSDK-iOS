//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java/im/actor/runtime/markdown/Patterns.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorRuntimeMarkdownPatterns")
#ifdef RESTRICT_ImActorRuntimeMarkdownPatterns
#define INCLUDE_ALL_ImActorRuntimeMarkdownPatterns 0
#else
#define INCLUDE_ALL_ImActorRuntimeMarkdownPatterns 1
#endif
#undef RESTRICT_ImActorRuntimeMarkdownPatterns

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARPatterns_) && (INCLUDE_ALL_ImActorRuntimeMarkdownPatterns || defined(INCLUDE_ARPatterns))
#define ARPatterns_

@class ImActorRuntimeRegexpPatternCompat;
@protocol ImActorRuntimeRegexpMatcherCompat;

/*!
 @brief Commonly used regular expression patterns.
 */
@interface ARPatterns : NSObject

+ (NSString *)GOOD_IRI_CHAR;

+ (ImActorRuntimeRegexpPatternCompat *)IP_ADDRESS;

+ (ImActorRuntimeRegexpPatternCompat *)DOMAIN_NAME;

+ (NSString *)WEB_URL_CHAR;

+ (NSString *)WEB_URL_START_CHAR;

+ (ImActorRuntimeRegexpPatternCompat *)WEB_URL;

+ (ImActorRuntimeRegexpPatternCompat *)WEB_URL_START;

+ (ImActorRuntimeRegexpPatternCompat *)EMAIL_ADDRESS;

+ (ImActorRuntimeRegexpPatternCompat *)PHONE;

#pragma mark Public

/*!
 @brief Convenience method to take all of the non-null matching groups in a
 regex Matcher and return them as a concatenated string.
 @param matcher      The Matcher object from which grouped text will
 be extracted
 @return A String comprising all of the non-null matched
 groups concatenated together
 */
+ (NSString *)concatGroupsWithImActorRuntimeRegexpMatcherCompat:(id<ImActorRuntimeRegexpMatcherCompat>)matcher;

/*!
 @brief Convenience method to return only the digits and plus signs
 in the matching string.
 @param matcher      The Matcher object from which digits and plus will
 be extracted
 @return A String comprising all of the digits and plus in
 the match
 */
+ (NSString *)digitsAndPlusOnlyWithImActorRuntimeRegexpMatcherCompat:(id<ImActorRuntimeRegexpMatcherCompat>)matcher;

@end

J2OBJC_STATIC_INIT(ARPatterns)

/*!
 @brief Good characters for Internationalized Resource Identifiers (IRI).
 This comprises most common used Unicode characters allowed in IRI
 as detailed in RFC 3987.
 Specifically, those two byte Unicode characters are not included.
 */
inline NSString *ARPatterns_get_GOOD_IRI_CHAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ARPatterns_GOOD_IRI_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, GOOD_IRI_CHAR, NSString *)

inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_IP_ADDRESS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_IP_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, IP_ADDRESS, ImActorRuntimeRegexpPatternCompat *)

inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_DOMAIN_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_DOMAIN_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, DOMAIN_NAME, ImActorRuntimeRegexpPatternCompat *)

inline NSString *ARPatterns_get_WEB_URL_CHAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ARPatterns_WEB_URL_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, WEB_URL_CHAR, NSString *)

inline NSString *ARPatterns_get_WEB_URL_START_CHAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ARPatterns_WEB_URL_START_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, WEB_URL_START_CHAR, NSString *)

/*!
 @brief Regular expression pattern to match most part of RFC 3987
 Internationalized URLs, aka IRIs.
 Commonly used Unicode characters are
 added.
 */
inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_WEB_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, WEB_URL, ImActorRuntimeRegexpPatternCompat *)

inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_WEB_URL_START();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_WEB_URL_START;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, WEB_URL_START, ImActorRuntimeRegexpPatternCompat *)

inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_EMAIL_ADDRESS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_EMAIL_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, EMAIL_ADDRESS, ImActorRuntimeRegexpPatternCompat *)

/*!
 @brief This pattern is intended for searching for things that look like they
 might be phone numbers in arbitrary text, not for validating whether
 something is in fact a phone number.
 It will miss many things that
 are legitimate phone numbers.
 <p> The pattern matches the following:
 <ul>
 <li>Optionally, a + sign followed immediately by one or more digits. Spaces, dots, or dashes
 may follow.
 <li>Optionally, sets of digits in parentheses, separated by spaces, dots, or dashes.
 <li>A string starting and ending with a digit, containing digits, spaces, dots, and/or dashes.
 </ul>
 */
inline ImActorRuntimeRegexpPatternCompat *ARPatterns_get_PHONE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_PHONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ARPatterns, PHONE, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT NSString *ARPatterns_concatGroupsWithImActorRuntimeRegexpMatcherCompat_(id<ImActorRuntimeRegexpMatcherCompat> matcher);

FOUNDATION_EXPORT NSString *ARPatterns_digitsAndPlusOnlyWithImActorRuntimeRegexpMatcherCompat_(id<ImActorRuntimeRegexpMatcherCompat> matcher);

J2OBJC_TYPE_LITERAL_HEADER(ARPatterns)

@compatibility_alias ImActorRuntimeMarkdownPatterns ARPatterns;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorRuntimeMarkdownPatterns")
