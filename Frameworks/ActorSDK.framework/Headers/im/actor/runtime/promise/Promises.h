//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/liruqi/Documents/github/actor-platform/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java/im/actor/runtime/promise/Promises.java
//

@import j2objc;

#pragma push_macro("INCLUDE_ALL_ImActorRuntimePromisePromises")
#ifdef RESTRICT_ImActorRuntimePromisePromises
#define INCLUDE_ALL_ImActorRuntimePromisePromises 0
#else
#define INCLUDE_ALL_ImActorRuntimePromisePromises 1
#endif
#undef RESTRICT_ImActorRuntimePromisePromises

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (ARPromises_) && (INCLUDE_ALL_ImActorRuntimePromisePromises || defined(INCLUDE_ARPromises))
#define ARPromises_

@class ARPromise;
@class ARPromiseResolver;
@protocol ARPromiseFunc;

/*!
 @brief Various methods for creating promises.
 */
@interface ARPromises : NSObject

#pragma mark Public

- (instancetype)init;

+ (ARPromise *)logWithTag:(NSString *)TAG
             withResolver:(ARPromiseResolver *)resolver
                 withFunc:(id<ARPromiseFunc>)func;

/*!
 @brief Combines two promises to one with different data types
 @param t1   first argument
 @param t2   second argument
 @return promise
 */
+ (ARPromise *)tupleWithT1:(ARPromise *)t1
                    withT2:(ARPromise *)t2;

/*!
 @brief Combines tree promises to one with different data types
 @param t1   first argument
 @param t2   second argument
 @param t3   third argument
 @return promise
 */
+ (ARPromise *)tupleWithT1:(ARPromise *)t1
                    withT2:(ARPromise *)t2
                    withT3:(ARPromise *)t3;

/*!
 @brief Combines four promises to one with different data types
 @param t1   first argument
 @param t2   second argument
 @param t3   third argument
 @param t4   fourth argument
 @return promise
 */
+ (ARPromise *)tupleWithT1:(ARPromise *)t1
                    withT2:(ARPromise *)t2
                    withT3:(ARPromise *)t3
                    withT4:(ARPromise *)t4;

@end

J2OBJC_EMPTY_STATIC_INIT(ARPromises)

FOUNDATION_EXPORT ARPromise *ARPromises_logWithTag_withResolver_withFunc_(NSString *TAG, ARPromiseResolver *resolver, id<ARPromiseFunc> func);

FOUNDATION_EXPORT ARPromise *ARPromises_tupleWithT1_withT2_(ARPromise *t1, ARPromise *t2);

FOUNDATION_EXPORT ARPromise *ARPromises_tupleWithT1_withT2_withT3_(ARPromise *t1, ARPromise *t2, ARPromise *t3);

FOUNDATION_EXPORT ARPromise *ARPromises_tupleWithT1_withT2_withT3_withT4_(ARPromise *t1, ARPromise *t2, ARPromise *t3, ARPromise *t4);

FOUNDATION_EXPORT void ARPromises_init(ARPromises *self);

FOUNDATION_EXPORT ARPromises *new_ARPromises_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ARPromises *create_ARPromises_init();

J2OBJC_TYPE_LITERAL_HEADER(ARPromises)

@compatibility_alias ImActorRuntimePromisePromises ARPromises;

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ImActorRuntimePromisePromises")
